/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINEDITOR_H_4ACCBAA__
#define __PLUGINEDITOR_H_4ACCBAA__



#include "../JuceLibraryCode/JuceHeader.h"
#include "../JuceLibraryCode/JucePluginCharacteristics.h"
#include "PluginProcessor.h"
#include "WaveformControl.h"


class WaveformControl;

//==============================================================================
/** This is the editor component that our filter will display.
*/
class mlrVSTAudioProcessorEditor  : public AudioProcessorEditor,
                                    public SliderListener,
									public ButtonListener,
                                    public ComboBoxListener,
                                    public Timer
{
public:
    mlrVSTAudioProcessorEditor (mlrVSTAudioProcessor* ownerFilter);
    ~mlrVSTAudioProcessorEditor();

    //==============================================================================
    void timerCallback();
    void paint(Graphics& g);

    // listeners
    void comboBoxChanged (ComboBox* comboBoxThatHasChanged);
    void sliderValueChanged (Slider*);
	void buttonClicked(Button*);

    //void mouseDown(const MouseEvent&);

    int getSamplePoolSize() { return samplePool.size(); }
    // TODO: bounds checking?
    String getSampleName(const int &index)
    {
        jassert(index < samplePool.size());
        return samplePool[index]->getSampleName();
    }

    // Returns a pointer to the sample in the sample pool at the specified index
    AudioSample* getSample(const int &index)
    {
        jassert(index < samplePool.size());
        return samplePool[index];
    }


    Array<File> getLoadedFiles();

private:
    Label infoLabel, delayLabel, helloLabel, logoLabel;
    Slider delaySlider, masterGainSlider;
	DrawableButton loadButton, debugButton;

    ComboBox selNumChannels;

	Array<File> loadedFiles;
	ListBox fileList;

	AudioFormatManager formatManager;

	// Store the waveform controls/strips in array. 
    // For a standard monome64 this is 7
    OwnedArray<WaveformControl> waveformArray;
    const int numStrips;

    // This is the number of seperate channels. In 
    // pratical terms, this is just the number of 
    // samples that can be played at once.
	int numChannels;

    OwnedArray<Slider> slidersArray;

    // For simplicity, let's stick to a fixed size GUI
    static const int GUI_HEIGHT = 700;
    static const int GUI_WIDTH = 600;

    AudioPlayHead::CurrentPositionInfo lastDisplayedPosition;

    mlrVSTAudioProcessor* getProcessor() const { return static_cast <mlrVSTAudioProcessor*> (getAudioProcessor()); }

    // store array of samplePool objects
    OwnedArray<AudioSample> samplePool;


    void displayPositionInfo (const AudioPlayHead::CurrentPositionInfo& pos);

};


#endif  // __PLUGINEDITOR_H_4ACCBAA__
